From 61f8aa7eb6af9e5b0d77359cfb7d50bf8b29e867 Mon Sep 17 00:00:00 2001
From: edo9300 <edoardo762@gmail.com>
Date: Tue, 14 Apr 2020 22:42:44 +0200
Subject: [PATCH] edopro: hide hands and loop music

Add option to hide hands during replays
Add checkboxes to hide hands in replays and loop music
---
 gframe/client_card.cpp     | 10 ++++++++--
 gframe/client_card.h       |  1 +
 gframe/client_field.cpp    | 17 +++++++++--------
 gframe/duelclient.cpp      |  3 ++-
 gframe/event_handler.cpp   |  8 ++++++++
 gframe/game.cpp            | 22 +++++++++++++---------
 gframe/game_config.cpp     |  4 ++++
 gframe/game_config.h       |  2 ++
 gframe/menu_handler.h      |  2 ++
 gframe/settings_window.cpp |  1 +
 gframe/settings_window.h   |  2 ++
 gframe/sound_manager.cpp   |  4 ++--
 gframe/sound_manager.h     |  4 ++--
 13 files changed, 56 insertions(+), 24 deletions(-)

diff --git a/gframe/client_card.cpp b/gframe/client_card.cpp
index 446f8a02..80d94248 100644
--- a/gframe/client_card.cpp
+++ b/gframe/client_card.cpp
@@ -21,6 +21,7 @@ ClientCard::ClientCard() {
 	is_highlighting = false;
 	status = 0;
 	is_reversed = false;
+	is_public = false;
 	cmdFlag = 0;
 	code = 0;
 	cover = 0;
@@ -140,8 +141,13 @@ void ClientCard::UpdateInfo(const CoreUtils::Query& query) {
 			counters[ctype] = ccount;
 		}
 	}
-	/*if(query.flag & QUERY_IS_PUBLIC) {
-	}*/
+	if(query.flag & QUERY_IS_PUBLIC) {
+		if(is_public != query.is_public && !mainGame->dInfo.isCatchingUp) {
+			is_public = query.is_public;
+			mainGame->dField.MoveCard(this, 5);
+		} else
+			is_public = query.is_public;
+	}
 	if(query.flag & QUERY_LSCALE) {
 		lscale = query.lscale;
 		lscstring = fmt::to_wstring(lscale);
diff --git a/gframe/client_card.h b/gframe/client_card.h
index e62a47dc..9116dfe1 100644
--- a/gframe/client_card.h
+++ b/gframe/client_card.h
@@ -69,6 +69,7 @@ public:
 	bool is_showchaintarget;
 	bool is_highlighting;
 	bool is_reversed;
+	bool is_public;
 	uint32_t code;
 	uint32_t chain_code;
 	uint32_t alias;
diff --git a/gframe/client_field.cpp b/gframe/client_field.cpp
index 3780a7bd..f3389348 100644
--- a/gframe/client_field.cpp
+++ b/gframe/client_field.cpp
@@ -1,4 +1,5 @@
 #include <stack>
+#include "game_config.h"
 #include <irrlicht.h>
 #include "client_field.h"
 #include "client_card.h"
@@ -809,14 +810,14 @@ void ClientField::GetCardLocation(ClientCard* pcard, irr::core::vector3df* t, ir
 				t->Y = 4.0f;
 				t->Z = 0.5f + 0.001f * sequence;
 			}
-			if(pcard->code) {
+			if(pcard->code && (!mainGame->dInfo.isReplay || !gGameConfig->hideHandsInReplays || pcard->is_public || pcard->is_hovered)) {
 				r->X = -FIELD_ANGLE;
 				r->Y = 0.0f;
 				r->Z = 0.0f;
 			} else {
 				r->X = FIELD_ANGLE;
 				r->Y = PI;
-				r->Z = 0;
+				r->Z = 0.0f;
 			}
 		} else {
 			if (count <= (6 - speed * 2))
@@ -833,14 +834,14 @@ void ClientField::GetCardLocation(ClientCard* pcard, irr::core::vector3df* t, ir
 				t->Y = -3.4f;
 				t->Z = 0.5f - 0.001f * sequence;
 			}
-			if (pcard->code == 0) {
+			if (pcard->code && (!mainGame->dInfo.isReplay || !gGameConfig->hideHandsInReplays || pcard->is_public || pcard->is_hovered)) {
+				r->X = -FIELD_ANGLE;
+				r->Y = 0.0f;
+				r->Z = 0.0f;
+			} else {
 				r->X = FIELD_ANGLE;
 				r->Y = PI;
-				r->Z = 0;
-			} else {
-				r->X = -FIELD_ANGLE;
-				r->Y = 0;
-				r->Z = 0;
+				r->Z = 0.0f;
 			}
 		}
 		break;
diff --git a/gframe/duelclient.cpp b/gframe/duelclient.cpp
index 6b2f801d..3e35c4d4 100644
--- a/gframe/duelclient.cpp
+++ b/gframe/duelclient.cpp
@@ -3085,7 +3085,8 @@ int DuelClient::ClientAnalyze(char * msg, unsigned int len) {
 		if(mainGame->dInfo.isCatchingUp)
 			return true;
 		ClientCard* pcard = mainGame->dField.GetCard(mainGame->LocalPlayer(info.controler), info.location, info.sequence, info.position);
-		if(pcard->code != code) {
+		if(pcard->code != code || (!pcard->is_public && !mainGame->dInfo.compat_mode)) {
+			pcard->is_public = mainGame->dInfo.compat_mode;
 			pcard->code = code;
 			mainGame->dField.MoveCard(pcard, 10);
 		}
diff --git a/gframe/event_handler.cpp b/gframe/event_handler.cpp
index 9a698bf9..4597d8f2 100644
--- a/gframe/event_handler.cpp
+++ b/gframe/event_handler.cpp
@@ -1969,11 +1969,19 @@ bool ClientField::OnCommonEvent(const irr::SEvent& event, bool& stopPropagation)
 				gGameConfig->saveHandTest = mainGame->gSettings.chkSaveHandTest->isChecked();
 				return true;
 			}
+			case CHECKBOX_LOOP_MUSIC: {
+				gGameConfig->loopMusic = static_cast<IGUICheckBox*>(event.GUIEvent.Caller)->isChecked();
+				break;
+			}
 			case CHECKBOX_DISCORD_INTEGRATION: {
 				gGameConfig->discordIntegration = static_cast<IGUICheckBox*>(event.GUIEvent.Caller)->isChecked();
 				mainGame->discord.UpdatePresence(gGameConfig->discordIntegration ? DiscordWrapper::INITIALIZE : DiscordWrapper::TERMINATE);
 				break;
 			}
+			case CHECKBOX_HIDE_HANDS_REPLAY: {
+				gGameConfig->hideHandsInReplays = static_cast<IGUICheckBox*>(event.GUIEvent.Caller)->isChecked();
+				break;
+			}
 			}
 			break;
 		}
diff --git a/gframe/game.cpp b/gframe/game.cpp
index 3d596d48..57e8d2c1 100644
--- a/gframe/game.cpp
+++ b/gframe/game.cpp
@@ -799,11 +799,15 @@ bool Game::Initialize() {
 	gSettings.scrMusicVolume->setPos(gGameConfig->musicVolume);
 	gSettings.scrMusicVolume->setLargeStep(1);
 	gSettings.scrMusicVolume->setSmallStep(1);
-	gSettings.stNoAudioBackend = env->addStaticText(gDataManager->GetSysString(2058).c_str(), Scale(340, 305, 645, 330), false, true, sPanel);
+	gSettings.chkLoopMusic = env->addCheckBox(gGameConfig->discordIntegration, Scale(340, 305, 645, 330), sPanel, CHECKBOX_LOOP_MUSIC, gDataManager->GetSysString(2079).c_str());
+	defaultStrings.emplace_back(gSettings.chkDiscordIntegration, 2079);
+	gSettings.stNoAudioBackend = env->addStaticText(gDataManager->GetSysString(2058).c_str(), Scale(340, 215, 645, 330), false, true, sPanel);
 	defaultStrings.emplace_back(gSettings.stNoAudioBackend, 2058);
 	gSettings.stNoAudioBackend->setVisible(false);
-	gSettings.chkDiscordIntegration = env->addCheckBox(gGameConfig->discordIntegration, Scale(340, 305, 645, 330), sPanel, CHECKBOX_DISCORD_INTEGRATION, gDataManager->GetSysString(2078).c_str());
+	gSettings.chkDiscordIntegration = env->addCheckBox(gGameConfig->discordIntegration, Scale(340, 335, 645, 360), sPanel, CHECKBOX_DISCORD_INTEGRATION, gDataManager->GetSysString(2078).c_str());
 	defaultStrings.emplace_back(gSettings.chkDiscordIntegration, 2078);
+	gSettings.chkHideHandsInReplays = env->addCheckBox(gGameConfig->hideHandsInReplays, Scale(340, 365, 645, 390), sPanel, CHECKBOX_HIDE_HANDS_REPLAY, gDataManager->GetSysString(2080).c_str());
+	defaultStrings.emplace_back(gSettings.chkDiscordIntegration, 2080);
 	// end audio

 	wBtnSettings = env->addWindow(Scale(0, 610, 30, 640));
@@ -1649,15 +1653,15 @@ bool Game::MainLoop() {
 					discord.UpdatePresence(DiscordWrapper::DUEL);
 			}
 			if (showcardcode == 1 || showcardcode == 3)
-				gSoundManager->PlayBGM(SoundManager::BGM::WIN);
+				gSoundManager->PlayBGM(SoundManager::BGM::WIN, gGameConfig->loopMusic);
 			else if (showcardcode == 2)
-				gSoundManager->PlayBGM(SoundManager::BGM::LOSE);
+				gSoundManager->PlayBGM(SoundManager::BGM::LOSE, gGameConfig->loopMusic);
 			else if (dInfo.lp[0] > 0 && dInfo.lp[0] <= dInfo.lp[1] / 2)
-				gSoundManager->PlayBGM(SoundManager::BGM::DISADVANTAGE);
+				gSoundManager->PlayBGM(SoundManager::BGM::DISADVANTAGE, gGameConfig->loopMusic);
 			else if (dInfo.lp[0] > 0 && dInfo.lp[0] >= dInfo.lp[1] * 2)
-				gSoundManager->PlayBGM(SoundManager::BGM::ADVANTAGE);
+				gSoundManager->PlayBGM(SoundManager::BGM::ADVANTAGE, gGameConfig->loopMusic);
 			else
-				gSoundManager->PlayBGM(SoundManager::BGM::DUEL);
+				gSoundManager->PlayBGM(SoundManager::BGM::DUEL, gGameConfig->loopMusic);
 			MATERIAL_GUARD(
 			DrawBackImage(imageManager.tBackGround, resized);
 			DrawBackGround();
@@ -1672,7 +1676,7 @@ bool Game::MainLoop() {
 				discord.UpdatePresence(DiscordWrapper::DECK_SIDING);
 			else
 				discord.UpdatePresence(DiscordWrapper::DECK);
-			gSoundManager->PlayBGM(SoundManager::BGM::DECK);
+			gSoundManager->PlayBGM(SoundManager::BGM::DECK, gGameConfig->loopMusic);
 			DrawBackImage(imageManager.tBackGround_deck, resized);
 			MATERIAL_GUARD(DrawDeckBd());
 		} else {
@@ -1680,7 +1684,7 @@ bool Game::MainLoop() {
 				discord.UpdatePresence(DiscordWrapper::IN_LOBBY);
 			else
 				discord.UpdatePresence(DiscordWrapper::MENU);
-			gSoundManager->PlayBGM(SoundManager::BGM::MENU);
+			gSoundManager->PlayBGM(SoundManager::BGM::MENU, gGameConfig->loopMusic);
 			DrawBackImage(imageManager.tBackGround_menu, resized);
 		}
 #ifndef __ANDROID__
diff --git a/gframe/game_config.cpp b/gframe/game_config.cpp
index f23f86af..f96f2917 100644
--- a/gframe/game_config.cpp
+++ b/gframe/game_config.cpp
@@ -109,11 +109,13 @@ bool GameConfig::Load(const path_char* filename)
 #define DESERIALIZE_BOOL(name) else if (type == #name) name = !!std::stoi(str);
 			DESERIALIZE_BOOL(relayDuel)
 			DESERIALIZE_BOOL(noCheckDeck)
+			DESERIALIZE_BOOL(hideHandsInReplays)
 			DESERIALIZE_BOOL(noShuffleDeck)
 			DESERIALIZE_BOOL(vsync)
 			DESERIALIZE_BOOL(showScopeLabel)
 			DESERIALIZE_BOOL(saveHandTest)
 			DESERIALIZE_BOOL(discordIntegration)
+			DESERIALIZE_BOOL(loopMusic)
 #ifdef WIN32
 			DESERIALIZE_BOOL(showConsole)
 #endif
@@ -260,6 +262,7 @@ bool GameConfig::Save(const path_char* filename)
 	SERIALIZE(relayDuel);
 	SERIALIZE(noShuffleDeck);
 	SERIALIZE(noCheckDeck);
+	SERIALIZE(hideHandsInReplays);
 	conf_file << "textfont = "           << BufferIO::EncodeUTF8s(textfont) << " " << std::to_string(textfontsize) << "\n";
 	conf_file << "numfont = "            << BufferIO::EncodeUTF8s(numfont) << "\n";
 	conf_file << "serverport = "         << BufferIO::EncodeUTF8s(serverport) << "\n";
@@ -296,6 +299,7 @@ bool GameConfig::Save(const path_char* filename)
 	conf_file << "enable_sound = "       << enablesound << "\n";
 	conf_file << "music_volume = "       << musicVolume << "\n";
 	conf_file << "sound_volume = "       << soundVolume << "\n";
+	SERIALIZE(loopMusic);
 	SERIALIZE(saveHandTest);
 	SERIALIZE(discordIntegration);
 #ifdef __ANDROID__
diff --git a/gframe/game_config.h b/gframe/game_config.h
index 4bd6f59e..74d53a6e 100644
--- a/gframe/game_config.h
+++ b/gframe/game_config.h
@@ -85,6 +85,7 @@ struct GameConfig
 	bool native_mouse = false;
 #else
 	bool accurate_bg_resize = false;
+	bool hideHandsInReplays = false;
 #endif
 	bool chkAnime = false;
 #ifdef __APPLE__
@@ -98,6 +99,7 @@ struct GameConfig
 	bool saveHandTest = true;
 	int musicVolume = 20;
 	int soundVolume = 20;
+	bool loopMusic = true;
 	path_string skin = EPRO_TEXT("none");
 	path_string locale = EPRO_TEXT("English");
 	path_string working_directory = EPRO_TEXT("./");
diff --git a/gframe/menu_handler.h b/gframe/menu_handler.h
index 2914348e..178147fe 100644
--- a/gframe/menu_handler.h
+++ b/gframe/menu_handler.h
@@ -190,7 +190,9 @@ enum GUI {
 	COMBOBOX_CORE_LOG_OUTPUT,
 	CHECKBOX_SHOW_SCOPE_LABEL,
 	CHECKBOX_SAVE_HAND_TEST_REPLAY,
+	CHECKBOX_LOOP_MUSIC,
 	CHECKBOX_DISCORD_INTEGRATION,
+	CHECKBOX_HIDE_HANDS_REPLAY,

 	BUTTON_MARKS_FILTER,
 	BUTTON_MARKERS_OK,
diff --git a/gframe/settings_window.cpp b/gframe/settings_window.cpp
index d1ee6652..9479f450 100644
--- a/gframe/settings_window.cpp
+++ b/gframe/settings_window.cpp
@@ -22,6 +22,7 @@ void SettingsWindow::DisableAudio() {
 	chkEnableMusic->setVisible(false);
 	stMusicVolume->setVisible(false);
 	scrMusicVolume->setVisible(false);
+	chkLoopMusic->setVisible(false);
 	stNoAudioBackend->setVisible(true);
 }

diff --git a/gframe/settings_window.h b/gframe/settings_window.h
index a001b0a5..b214d135 100644
--- a/gframe/settings_window.h
+++ b/gframe/settings_window.h
@@ -76,9 +76,11 @@ struct SettingsWindow {
 	irr::gui::IGUICheckBox* chkEnableMusic;
 	irr::gui::IGUIStaticText* stMusicVolume;
 	irr::gui::IGUIScrollBar* scrMusicVolume;
+	irr::gui::IGUICheckBox* chkLoopMusic; // exclusive to window
 	irr::gui::IGUIStaticText* stNoAudioBackend;
 	// end audio
 	irr::gui::IGUICheckBox* chkDiscordIntegration;
+	irr::gui::IGUICheckBox* chkHideHandsInReplays;

 	void DisableAudio();
 };
diff --git a/gframe/sound_manager.cpp b/gframe/sound_manager.cpp
index 461bbf70..c32b446e 100644
--- a/gframe/sound_manager.cpp
+++ b/gframe/sound_manager.cpp
@@ -128,7 +128,7 @@ void SoundManager::PlaySoundEffect(SFX sound) {
 	mixer->PlaySound(working_dir + "/" + fx.at(sound));
 #endif
 }
-void SoundManager::PlayBGM(BGM scene) {
+void SoundManager::PlayBGM(BGM scene, bool loop) {
 #ifdef BACKEND
 	auto& list = BGMList[scene];
 	int count = list.size();
@@ -136,7 +136,7 @@ void SoundManager::PlayBGM(BGM scene) {
 		bgm_scene = scene;
 		int bgm = (std::uniform_int_distribution<>(0, count - 1))(rnd);
 		std::string BGMName = working_dir + "/./sound/BGM/" + list[bgm];
-		mixer->PlayMusic(BGMName, true);
+		mixer->PlayMusic(BGMName, loop);
 	}
 #endif
 }
diff --git a/gframe/sound_manager.h b/gframe/sound_manager.h
index f9614917..3c6f6edf 100644
--- a/gframe/sound_manager.h
+++ b/gframe/sound_manager.h
@@ -57,7 +57,7 @@ public:
 	void RefreshBGMList();
 	void RefreshChantsList();
 	void PlaySoundEffect(SFX sound);
-	void PlayBGM(BGM scene);
+	void PlayBGM(BGM scene, bool loop = true);
 	bool PlayChant(CHANT chant, unsigned int code);
 	void SetSoundVolume(double volume);
 	void SetMusicVolume(double volume);
@@ -85,4 +85,4 @@ extern SoundManager* gSoundManager;

 }

-#endif //SOUNDMANAGER_H
\ No newline at end of file
+#endif //SOUNDMANAGER_H
--
2.26.0
