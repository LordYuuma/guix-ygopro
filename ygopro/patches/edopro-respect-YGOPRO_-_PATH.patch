---
 gframe/data_handler.cpp | 20 +++++++++++++-----
 gframe/deck_manager.cpp |  3 ---
 gframe/game.cpp         | 45 ++++++++++++++++++++++++++---------------
 gframe/utils.cpp        | 10 +++++----
 4 files changed, 50 insertions(+), 28 deletions(-)

diff --git a/gframe/data_handler.cpp b/gframe/data_handler.cpp
index eb1650a4..9e1b73fa 100644
--- a/gframe/data_handler.cpp
+++ b/gframe/data_handler.cpp
@@ -1,4 +1,6 @@
 #include "data_handler.h"
+#include <iostream>
+#include <sstream>
 #include <fstream>
 #include <curl/curl.h>
 #include <irrlicht.h>
@@ -10,15 +12,23 @@
 #include "IrrlichtCommonIncludes1.9/CFileSystem.h"
 #include "Android/porting_android.h"
 #endif
+#include "deck_manager.h"
 
 namespace ygo {
 
 void DataHandler::LoadDatabases() {
-	if(std::ifstream("cards.cdb").good())
-		dataManager->LoadDB(EPRO_TEXT("cards.cdb"));
-	for(auto& file : Utils::FindFiles(EPRO_TEXT("./expansions/"), { EPRO_TEXT("cdb") }, 2))
-		dataManager->LoadDB(EPRO_TEXT("./expansions/") + file);
-	LoadArchivesDB();
+	const char* data_path_env = getenv("YGOPRO_DATA_PATH");
+	if(!data_path_env) return;
+	path_string data_path_s = ygo::Utils::ToPathString(data_path_env);
+	std::basic_stringstream<path_char> data_path(data_path_s);
+	path_string prefix;
+	while(std::getline(data_path, prefix, EPRO_TEXT(':'))) {
+		prefix = ygo::Utils::NormalizePath(prefix);
+		for (auto& file : Utils::FindFiles(prefix, { EPRO_TEXT("cdb") }))
+			dataManager->LoadDB(prefix + file);
+		deckManager.LoadLFListSingle(prefix + "lflist.conf");
+		dataManager->LoadStrings(prefix + "strings.conf");
+	}
 }
 void DataHandler::LoadArchivesDB() {
 	std::vector<char> buffer;
diff --git a/gframe/deck_manager.cpp b/gframe/deck_manager.cpp
index b46884be..f57f1ef3 100644
--- a/gframe/deck_manager.cpp
+++ b/gframe/deck_manager.cpp
@@ -74,9 +74,6 @@ bool DeckManager::LoadLFListFolder(path_string path) {
 	return loaded;
 }
 void DeckManager::LoadLFList() {
-	LoadLFListSingle(EPRO_TEXT("./expansions/lflist.conf"));
-	LoadLFListSingle(EPRO_TEXT("./lflist.conf"));
-	LoadLFListFolder(EPRO_TEXT("./lflists/"));
 	LFList nolimit;
 	nolimit.listName = gDataManager->GetSysString(1442); // N/A
 	nolimit.hash = 0;
diff --git a/gframe/game.cpp b/gframe/game.cpp
index ce093f7a..70a614ed 100644
--- a/gframe/game.cpp
+++ b/gframe/game.cpp
@@ -43,6 +43,8 @@
 #include "logging.h"
 #include "utils_gui.h"
 #include "custom_skin_enum.h"
+#include <iostream>
+#include <sstream>
 
 #ifdef __ANDROID__
 #include "CGUICustomComboBox/CGUICustomComboBox.h"
@@ -1323,7 +1325,7 @@ bool Game::MainLoop() {
 	irr::core::matrix4 mProjection;
 	BuildProjectionMatrix(mProjection, CAMERA_LEFT, CAMERA_RIGHT, CAMERA_BOTTOM, CAMERA_TOP, 1.0f, 100.0f);
 	camera->setProjectionMatrix(mProjection);
-	
+
 	mProjection.buildCameraLookAtMatrixLH(vector3df(FIELD_X, FIELD_Y, FIELD_Z), vector3df(FIELD_X, 0, 0), vector3df(0, 0, 1));
 	camera->setViewMatrixAffector(mProjection);
 	smgr->setAmbientLight(irr::video::SColorf(1.0f, 1.0f, 1.0f));
@@ -1492,7 +1494,7 @@ bool Game::MainLoop() {
 			driver->setMaterial(irr::video::IdentityMaterial);
 			driver->clearZBuffer();)
 		} else if(is_building) {
-			
+
 			if(is_siding)
 				discord.UpdatePresence(DiscordWrapper::DECK_SIDING);
 			else
@@ -2530,7 +2532,7 @@ void Game::ReloadElementsStrings() {
 	prev = cbFilterBanlist->getSelected();
 	ReloadCBFilterBanlist();
 	cbFilterBanlist->setSelected(prev);
-	
+
 	prev = cbDuelRule->getSelected();
 	if (prev >= 5) {
 		UpdateDuelParam();
@@ -2886,21 +2888,32 @@ void Game::MessageHandler(void* payload, const char* string, int type) {
 	}
 }
 void Game::PopulateResourcesDirectories() {
-	script_dirs.push_back(EPRO_TEXT("./expansions/script/"));
-	auto expansions_subdirs = Utils::FindSubfolders(EPRO_TEXT("./expansions/script/"));
-	script_dirs.insert(script_dirs.end(), expansions_subdirs.begin(), expansions_subdirs.end());
-	script_dirs.push_back(EPRO_TEXT("archives"));
-	script_dirs.push_back(EPRO_TEXT("./script/"));
-	auto script_subdirs = Utils::FindSubfolders(EPRO_TEXT("./script/"));
-	script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
-	pic_dirs.push_back(EPRO_TEXT("./expansions/pics/"));
-	pic_dirs.push_back(EPRO_TEXT("archives"));
+	const char* script_path_env = getenv("YGOPRO_SCRIPT_PATH");
+	if(script_path_env) {
+		path_string script_path_s = ygo::Utils::ToPathString(script_path_env);
+		std::basic_stringstream<path_char> script_path(script_path_s);
+		path_string script_dir;
+		while(std::getline(script_path, script_dir, EPRO_TEXT(':'))) {
+			script_dir = ygo::Utils::NormalizePath(script_dir);
+			script_dirs.push_back(script_dir);
+			auto script_subdirs = Utils::FindSubfolders(script_dir);
+			script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
+		}
+	}
+	const char* image_path_env = getenv("YGOPRO_IMAGE_PATH");
+	if(image_path_env) {
+		path_string image_path_s(ygo::Utils::ToPathString(image_path_env));
+		std::basic_stringstream<path_char> image_path(image_path_s);
+		path_string image_dir;
+		while(std::getline(image_path, image_dir, EPRO_TEXT(':'))) {
+			image_dir = ygo::Utils::NormalizePath(image_dir);
+			pic_dirs.push_back(image_dir);
+			cover_dirs.push_back(image_dir + EPRO_TEXT("cover/"));
+			field_dirs.push_back(image_dir + EPRO_TEXT("field/"));
+		}
+	}
 	pic_dirs.push_back(EPRO_TEXT("./pics/"));
-	cover_dirs.push_back(EPRO_TEXT("./expansions/pics/cover/"));
-	cover_dirs.push_back(EPRO_TEXT("archives"));
 	cover_dirs.push_back(EPRO_TEXT("./pics/cover/"));
-	field_dirs.push_back(EPRO_TEXT("./expansions/pics/field/"));
-	field_dirs.push_back(EPRO_TEXT("archives"));
 	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
 }
 
diff --git a/gframe/utils.cpp b/gframe/utils.cpp
index 963125ce..cdbe6097 100644
--- a/gframe/utils.cpp
+++ b/gframe/utils.cpp
@@ -234,7 +234,10 @@ namespace ygo {
 		std::wstring normalpath;
 		if(paths.front() == L".") {
 			paths.erase(paths.begin());
-			normalpath += L".";
+			normalpath += L"./";
+		}
+		if(path[0] == L'/') {
+			normalpath += L"/";
 		}
 		for(auto it = paths.begin(); it != paths.end();) {
 			if((*it).empty()) {
@@ -252,8 +255,6 @@ namespace ygo {
 			it++;
 		}
 		if(!paths.empty()) {
-			if(!normalpath.empty())
-				normalpath += L"/";
 			for(auto it = paths.begin(); it != (paths.end() - 1); it++) {
 				normalpath += *it + L"/";
 			}
@@ -299,6 +300,8 @@ namespace ygo {
 		if(paths.empty())
 			return path;
 		std::string normalpath;
+		if(path[0] == '/')
+			normalpath += "/";
 		for(auto it = paths.begin(); it != paths.end();) {
 			if((*it).empty()) {
 				it = paths.erase(it);
@@ -411,4 +414,3 @@ namespace ygo {
 		return (convertInputCasing ? ToUpperNoAccents(input) : input).find(convertTokenCasing ? ToUpperNoAccents(token) : token) != std::wstring::npos;
 	}
 }
-
-- 
2.25.1

