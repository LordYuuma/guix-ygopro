---
 gframe/deck_manager.cpp |  3 --
 gframe/game.cpp         | 65 ++++++++++++++++++++++++++---------------
 gframe/game.h           |  6 ++--
 gframe/utils.cpp        | 10 ++++---
 4 files changed, 51 insertions(+), 33 deletions(-)

diff --git a/gframe/deck_manager.cpp b/gframe/deck_manager.cpp
index 36c15fd6..d6a0b76b 100644
--- a/gframe/deck_manager.cpp
+++ b/gframe/deck_manager.cpp
@@ -74,9 +74,6 @@ bool DeckManager::LoadLFListFolder(path_string path) {
 	return loaded;
 }
 void DeckManager::LoadLFList() {
-	LoadLFListSingle(EPRO_TEXT("./expansions/lflist.conf"));
-	LoadLFListSingle(EPRO_TEXT("./lflist.conf"));
-	LoadLFListFolder(EPRO_TEXT("./lflists/"));
 	LFList nolimit;
 	nolimit.listName = dataManager.GetSysString(1442); // N/A
 	nolimit.hash = 0;
diff --git a/gframe/game.cpp b/gframe/game.cpp
index 443035ef..c06b639e 100644
--- a/gframe/game.cpp
+++ b/gframe/game.cpp
@@ -39,6 +39,8 @@
 #include "logging.h"
 #include "utils_gui.h"
 #include "custom_skin_enum.h"
+#include <iostream>
+#include <sstream>
 
 #ifdef __ANDROID__
 #include "CGUICustomComboBox/CGUICustomComboBox.h"
@@ -158,10 +160,7 @@ bool Game::Initialize() {
 		return false;
 	}
 	LoadPicUrls();
-	if (std::ifstream("cards.cdb").good()) {
-		dataManager.LoadDB(EPRO_TEXT("cards.cdb"));
-	}
-	LoadExpansionDB();
+	LoadDataDirs();
 	LoadZipArchives();
 	LoadArchivesDB();
 	RefreshAiDecks();
@@ -172,7 +171,6 @@ bool Game::Initialize() {
 	discord.Initialize(filesystem->getWorkingDirectory().c_str());
 	mainGame->discord.UpdatePresence(DiscordWrapper::INITIALIZE);
 	PopulateResourcesDirectories();
-	dataManager.LoadStrings(EPRO_TEXT("./expansions/strings.conf"));
 	deckManager.LoadLFList();
 	env = device->getGUIEnvironment();
 	numFont = irr::gui::CGUITTFont::createTTFont(env, gameConf.numfont.c_str(), Scale(16));
@@ -1334,7 +1332,7 @@ void Game::MainLoop() {
 	irr::core::matrix4 mProjection;
 	BuildProjectionMatrix(mProjection, CAMERA_LEFT, CAMERA_RIGHT, CAMERA_BOTTOM, CAMERA_TOP, 1.0f, 100.0f);
 	camera->setProjectionMatrix(mProjection);
-	
+
 	mProjection.buildCameraLookAtMatrixLH(vector3df(FIELD_X, FIELD_Y, FIELD_Z), vector3df(FIELD_X, 0, 0), vector3df(0, 0, 1));
 	camera->setViewMatrixAffector(mProjection);
 	smgr->setAmbientLight(irr::video::SColorf(1.0f, 1.0f, 1.0f));
@@ -1550,7 +1548,7 @@ void Game::MainLoop() {
 			driver->setMaterial(irr::video::IdentityMaterial);
 			driver->clearZBuffer();)
 		} else if(is_building) {
-			
+
 			if(is_siding)
 				discord.UpdatePresence(DiscordWrapper::DECK_SIDING);
 			else
@@ -1787,9 +1785,19 @@ void Game::LoadZipArchives() {
 		}
 	}
 }
-void Game::LoadExpansionDB() {
-	for (auto& file : Utils::FindFiles(EPRO_TEXT("./expansions/"), { EPRO_TEXT("cdb") }, 2))
-		dataManager.LoadDB(EPRO_TEXT("./expansions/") + file);
+void Game::LoadDataDirs() {
+	const char* _data_path = getenv("YGOPRO_DATA_PATH");
+	if(!_data_path) return;
+	path_string _data_path_s(ygo::Utils::ToPathString(_data_path));
+	std::basic_stringstream<path_char> data_path(_data_path_s);
+	path_string prefix;
+	while(std::getline(data_path, prefix, EPRO_TEXT(':'))) {
+		prefix = ygo::Utils::NormalizePath(prefix);
+		for (auto& file : Utils::FindFiles(prefix, { EPRO_TEXT("cdb") }))
+			dataManager.LoadDB(prefix + file);
+		deckManager.LoadLFListSingle(prefix + "lflist.conf");
+		dataManager.LoadStrings(prefix + "strings.conf");
+	}
 }
 void Game::LoadArchivesDB() {
 	for(auto& archive: Utils::archives) {
@@ -2994,21 +3002,32 @@ void Game::MessageHandler(void* payload, const char* string, int type) {
 	}
 }
 void Game::PopulateResourcesDirectories() {
-	script_dirs.push_back(EPRO_TEXT("./expansions/script/"));
-	auto expansions_subdirs = Utils::FindSubfolders(EPRO_TEXT("./expansions/script/"));
-	script_dirs.insert(script_dirs.end(), expansions_subdirs.begin(), expansions_subdirs.end());
-	script_dirs.push_back(EPRO_TEXT("archives"));
-	script_dirs.push_back(EPRO_TEXT("./script/"));
-	auto script_subdirs = Utils::FindSubfolders(EPRO_TEXT("./script/"));
-	script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
-	pic_dirs.push_back(EPRO_TEXT("./expansions/pics/"));
-	pic_dirs.push_back(EPRO_TEXT("archives"));
+	const char* _script_path = getenv("YGOPRO_SCRIPT_PATH");
+	if(_script_path) {
+		path_string _script_path_s(ygo::Utils::ToPathString(_script_path));
+		std::basic_stringstream<path_char> script_path(_script_path_s);
+		path_string script_dir;
+		while(std::getline(script_path, script_dir, EPRO_TEXT(':'))) {
+			script_dir = ygo::Utils::NormalizePath(script_dir);
+			script_dirs.push_back(script_dir);
+			auto script_subdirs = Utils::FindSubfolders(script_dir);
+			script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
+		}
+	}
+	const char* _image_path = getenv("YGOPRO_IMAGE_PATH");
+	if(_image_path) {
+		path_string _image_path_s(ygo::Utils::ToPathString(_image_path));
+		std::basic_stringstream<path_char> image_path(_image_path_s);
+		path_string image_dir;
+		while(std::getline(image_path, image_dir, EPRO_TEXT(':'))) {
+			image_dir = ygo::Utils::NormalizePath(image_dir);
+			pic_dirs.push_back(image_dir);
+			cover_dirs.push_back(image_dir + EPRO_TEXT("cover/"));
+			field_dirs.push_back(image_dir + EPRO_TEXT("field/"));
+		}
+	}
 	pic_dirs.push_back(EPRO_TEXT("./pics/"));
-	cover_dirs.push_back(EPRO_TEXT("./expansions/pics/cover/"));
-	cover_dirs.push_back(EPRO_TEXT("archives"));
 	cover_dirs.push_back(EPRO_TEXT("./pics/cover/"));
-	field_dirs.push_back(EPRO_TEXT("./expansions/pics/field/"));
-	field_dirs.push_back(EPRO_TEXT("archives"));
 	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
 }
 
diff --git a/gframe/game.h b/gframe/game.h
index 1aa531cd..a72b7daf 100644
--- a/gframe/game.h
+++ b/gframe/game.h
@@ -118,7 +118,7 @@ public:
 	path_string NoSkinLabel();
 	bool ApplySkin(const path_string& skin, bool reload = false);
 	void LoadZipArchives();
-	void LoadExpansionDB();
+	void LoadDataDirs();
 	void LoadArchivesDB();
 	void RefreshDeck(irr::gui::IGUIComboBox* cbDeck);
 	void RefreshLFLists();
@@ -212,7 +212,7 @@ public:
 	irr::core::recti ResizeWin(irr::s32 x, irr::s32 y, irr::s32 x2, irr::s32 y2, bool chat = false);
 	void SetCentered(irr::gui::IGUIElement* elem);
 	void ValidateName(irr::gui::IGUIElement* box);
-	
+
 	std::wstring ReadPuzzleMessage(const std::wstring& script_name);
 	OCG_Duel SetupDuel(OCG_DuelOptions opts);
 	std::vector<char> LoadScript(const std::string& script_name);
@@ -704,7 +704,7 @@ irr::core::rect<T> Game::Scale(irr::core::rect<T> rect) {
 
 }
 
-#define FIELD_X			4.2f	
+#define FIELD_X			4.2f
 #define FIELD_Y			8.0f
 #define FIELD_Z			7.8f
 #define FIELD_ANGLE		atan(FIELD_Y / FIELD_Z)
diff --git a/gframe/utils.cpp b/gframe/utils.cpp
index df2f696d..6bbe5f52 100644
--- a/gframe/utils.cpp
+++ b/gframe/utils.cpp
@@ -234,7 +234,10 @@ namespace ygo {
 		std::wstring normalpath;
 		if(paths.front() == L".") {
 			paths.erase(paths.begin());
-			normalpath += L".";
+			normalpath += L"./";
+		}
+		if(path[0] == L'/') {
+			normalpath += L"/";
 		}
 		for(auto it = paths.begin(); it != paths.end();) {
 			if((*it).empty()) {
@@ -252,8 +255,6 @@ namespace ygo {
 			it++;
 		}
 		if(!paths.empty()) {
-			if(!normalpath.empty())
-				normalpath += L"/";
 			for(auto it = paths.begin(); it != (paths.end() - 1); it++) {
 				normalpath += *it + L"/";
 			}
@@ -299,6 +300,8 @@ namespace ygo {
 		if(paths.empty())
 			return path;
 		std::string normalpath;
+		if(path[0] == '/')
+			normalpath += "/";
 		for(auto it = paths.begin(); it != paths.end();) {
 			if((*it).empty()) {
 				it = paths.erase(it);
@@ -411,4 +414,3 @@ namespace ygo {
 		return input.find(token) != std::wstring::npos;
 	}
 }
-
-- 
2.25.1

