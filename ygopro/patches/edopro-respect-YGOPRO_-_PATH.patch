From e5145d4f81b2c382dcd605d32a91eb89837ba85b Mon Sep 17 00:00:00 2001
From: LordYuuma <lordyuuma@gmail.com>
Date: Sun, 5 Apr 2020 14:32:35 +0200
Subject: [PATCH] edopro: Respect YGOPRO_*_PATH.

* premake5.lua (environment-paths): New option.
* gframe/Base64.h: Use UTF-8.
* gframe/data_handler.cpp (LoadDatabases)[YGOPRO_ENVIRONMENT_PATHS]:
Load databases and LFLists from YGOPRO_DATA_PATH.
* gframe/deck_manager.cpp (LoadLFList)[YGOPRO_ENVIRONMENT_PATHS]:
Don't load local LFLists -- use those loaded by the DataHandler instead.
* gframe/game.cpp (PopulateResourcesDirectories)[YGOPRO_ENVIRONMENT_PATHS]:
Load scripts from YGOPRO_SCRIPT_PATH.
Load pics from YGOPRO_IMAGE_PATH.  Fall back to local downloader.
* gframe/premake5.lua (ygopro-config)[environment-paths]:
Define YGOPRO_ENVIRONMENT_PATHS.
* gframe/text_types.h (operator/): Override for path_string.
* gframe/utils.h (NormalizePath): Allow absolute paths.
(PathForeach): New function.
* gframe/utils.cpp (PathForeach): Implement it.
---
 gframe/Base64.h         |  6 +++---
 gframe/data_handler.cpp | 15 +++++++++++++++
 gframe/deck_manager.cpp |  2 ++
 gframe/game.cpp         | 26 ++++++++++++++++++++++++++
 gframe/premake5.lua     |  4 ++++
 gframe/text_types.h     | 16 +++++++++++++++-
 gframe/utils.cpp        | 12 +++++++++++-
 gframe/utils.h          |  3 +++
 premake5.lua            |  4 ++++
 9 files changed, 83 insertions(+), 5 deletions(-)

diff --git a/gframe/Base64.h b/gframe/Base64.h
index b018a273..b36ab8a5 100644
--- a/gframe/Base64.h
+++ b/gframe/Base64.h
@@ -2,7 +2,7 @@
    base64.cpp and base64.h
    base64 encoding and decoding with C++.
    Version: 1.01.00
-   Copyright (C) 2004-2017 René Nyffenegger
+   Copyright (C) 2004-2017 RenÃ© Nyffenegger
    This source code is provided 'as-is', without any express or implied
    warranty. In no event will the author be held liable for any damages
    arising from the use of this software.
@@ -16,7 +16,7 @@
    2. Altered source versions must be plainly marked as such, and must not be
 	  misrepresented as being the original source code.
    3. This notice may not be removed or altered from any source distribution.
-   René Nyffenegger rene.nyffenegger@adp-gmbh.ch
+   RenÃ© Nyffenegger rene.nyffenegger@adp-gmbh.ch
 */
 #ifndef BASE64_H
 #define BASE64_H
@@ -108,4 +108,4 @@ std::vector<uint8_t> base64_decode(const T* encoded_string, size_t in_len) {

 	return ret;
 }
-#endif //BASE64_H
\ No newline at end of file
+#endif //BASE64_H
diff --git a/gframe/data_handler.cpp b/gframe/data_handler.cpp
index 08496f82..f29101e1 100644
--- a/gframe/data_handler.cpp
+++ b/gframe/data_handler.cpp
@@ -12,15 +12,30 @@
 #include "IrrlichtCommonIncludes1.9/CFileSystem.h"
 #include "Android/porting_android.h"
 #endif
+#include "deck_manager.h"

 namespace ygo {

 void DataHandler::LoadDatabases() {
+#ifdef YGOPRO_ENVIRONMENT_PATHS
+	const char* data_path_env = getenv("YGOPRO_DATA_PATH");
+	if(!data_path_env) return;
+	path_string data_path_s = Utils::ToPathString(data_path_env);
+	ygo::Utils::PathForeach(
+		data_path_s,
+		[&](const path_string& prefix) {
+			for (auto& file : Utils::FindFiles(prefix, { EPRO_TEXT("cdb") }))
+				dataManager->LoadDB(prefix / file);
+			deckManager->LoadLFListSingle(prefix / EPRO_TEXT("lflist.conf"));
+			dataManager->LoadStrings(prefix / EPRO_TEXT("strings.conf"));
+		});
+#else
 	if(std::ifstream("cards.cdb").good())
 		dataManager->LoadDB(EPRO_TEXT("cards.cdb"));
 	for(auto& file : Utils::FindFiles(EPRO_TEXT("./expansions/"), { EPRO_TEXT("cdb") }, 2))
 		dataManager->LoadDB(EPRO_TEXT("./expansions/") + file);
 	LoadArchivesDB();
+#endif
 }
 void DataHandler::LoadArchivesDB() {
 	std::vector<char> buffer;
diff --git a/gframe/deck_manager.cpp b/gframe/deck_manager.cpp
index 383edbe8..797f2d2b 100644
--- a/gframe/deck_manager.cpp
+++ b/gframe/deck_manager.cpp
@@ -73,9 +73,11 @@ bool DeckManager::LoadLFListFolder(path_string path) {
 	return loaded;
 }
 void DeckManager::LoadLFList() {
+#ifndef YGOPRO_ENVIRONMENT_PATHS
 	LoadLFListSingle(EPRO_TEXT("./expansions/lflist.conf"));
 	LoadLFListSingle(EPRO_TEXT("./lflist.conf"));
 	LoadLFListFolder(EPRO_TEXT("./lflists/"));
+#endif
 	LFList nolimit;
 	nolimit.listName = L"N/A"; // N/A
 	nolimit.hash = 0;
diff --git a/gframe/game.cpp b/gframe/game.cpp
index f27d501e..3607ad6a 100644
--- a/gframe/game.cpp
+++ b/gframe/game.cpp
@@ -3185,6 +3185,31 @@ void Game::UpdateUnzipBar(unzip_payload* payload) {
 	game->updateProgressBottom->setProgress(payload->percentage);
 }
 void Game::PopulateResourcesDirectories() {
+#ifdef YGOPRO_ENVIRONMENT_PATHS
+	const char* script_path_env = getenv("YGOPRO_SCRIPT_PATH");
+	if (script_path_env)
+		Utils::PathForeach(
+			Utils::ToPathString(script_path_env),
+			[this](const path_string& prefix) {
+				path_string script_dir = Utils::NormalizePath(prefix);
+				script_dirs.push_back(script_dir);
+				auto script_subdirs = Utils::FindSubfolders(script_dir);
+				script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
+			});
+	const char* image_path_env = getenv("YGOPRO_IMAGE_PATH");
+	if(image_path_env)
+		Utils::PathForeach(
+			Utils::ToPathString(image_path_env),
+			[this](const path_string& prefix) {
+				path_string image_dir = Utils::NormalizePath(prefix);
+				pic_dirs.push_back(image_dir);
+				cover_dirs.push_back(image_dir / EPRO_TEXT("cover/"));
+				field_dirs.push_back(image_dir / EPRO_TEXT("field/"));
+			});
+	pic_dirs.push_back(EPRO_TEXT("./pics/"));
+	cover_dirs.push_back(EPRO_TEXT("./pics/cover/"));
+	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
+#else
 	script_dirs.push_back(EPRO_TEXT("./expansions/script/"));
 	auto expansions_subdirs = Utils::FindSubfolders(EPRO_TEXT("./expansions/script/"));
 	script_dirs.insert(script_dirs.end(), expansions_subdirs.begin(), expansions_subdirs.end());
@@ -3201,6 +3226,7 @@ void Game::PopulateResourcesDirectories() {
 	field_dirs.push_back(EPRO_TEXT("./expansions/pics/field/"));
 	field_dirs.push_back(EPRO_TEXT("archives"));
 	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
+#endif
 }

 void Game::PopulateLocales() {
diff --git a/gframe/premake5.lua b/gframe/premake5.lua
index a2581ea5..757c0cff 100644
--- a/gframe/premake5.lua
+++ b/gframe/premake5.lua
@@ -21,6 +21,10 @@ local ygopro_config=function(static_core)
 	if _OPTIONS["update-url"] then
 		defines { "UPDATE_URL=" .. _OPTIONS["update-url"] }
 	end
+	if _OPTIONS["environment-paths"] then
+		defines { "YGOPRO_ENVIRONMENT_PATHS" }
+	end
+
 	includedirs "../ocgcore"
 	links { "clzma", "freetype", "Irrlicht" }
 	if _OPTIONS["sound"] then
diff --git a/gframe/text_types.h b/gframe/text_types.h
index 6d274a79..4574cabd 100644
--- a/gframe/text_types.h
+++ b/gframe/text_types.h
@@ -13,4 +13,18 @@ using path_char = wchar_t;
 using path_char = char;
 #endif // UNICODE
 using path_string = std::basic_string<path_char>;
-#endif /* TEXT_TYPES_H_ */
\ No newline at end of file
+
+inline path_string operator/(const path_string& base, const path_string subdir) {
+	if (base.empty() || base == EPRO_TEXT(".")) {
+		path_string path(subdir);
+		return path;
+	}
+	else {
+		path_string path(base);
+		if (base.back() != EPRO_TEXT('/'))
+			path += EPRO_TEXT("/");
+		path += subdir;
+		return path;
+	}
+}
+#endif /* TEXT_TYPES_H_ */
diff --git a/gframe/utils.cpp b/gframe/utils.cpp
index 8a26a56f..226ddee6 100644
--- a/gframe/utils.cpp
+++ b/gframe/utils.cpp
@@ -1,6 +1,7 @@
 #include "utils.h"
 #include <cmath> // std::round
 #include <fstream>
+#include <sstream>
 #ifdef _WIN32
 #define WIN32_LEAN_AND_MEAN
 #include <Windows.h>
@@ -143,6 +144,16 @@ namespace ygo {
 #endif
 	}

+	void Utils::PathForeach(const path_string& path, const std::function<void(path_string)>& cb)
+	{
+		// FIXME: should be ';' in WIN32 and WIN64.
+		static const path_char path_sep = EPRO_TEXT(':');
+		std::basic_istringstream<path_char> dirs(path);
+		path_string dir;
+		while (std::getline(dirs, dir, path_sep))
+			cb(dir);
+	}
+
 	std::vector<path_string> Utils::FindFiles(const path_string& path, std::vector<path_string> extensions, int subdirectorylayers) {
 		std::vector<path_string> res;
 		FindFiles(path, [&res, extensions, path, subdirectorylayers](path_string name, bool isdir, void* payload) {
@@ -433,4 +444,3 @@ namespace ygo {
 #endif
 	}
 }
-
diff --git a/gframe/utils.h b/gframe/utils.h
index c8a14ee8..75b96a20 100644
--- a/gframe/utils.h
+++ b/gframe/utils.h
@@ -74,6 +74,7 @@ namespace ygo {
 		static bool ClearDirectory(const path_string& path);
 		static bool DeleteDirectory(const path_string& source);
 		static void CreateResourceFolders();
+		static void PathForeach(const path_string& path, const std::function<void(path_string)>& cb);
 		static void FindFiles(const path_string& path, const std::function<void(path_string, bool, void*)>& cb, void* payload = nullptr);
 		static std::vector<path_string> FindFiles(const path_string& path, std::vector<path_string> extensions, int subdirectorylayers = 0);
 		/** Returned subfolder names are prefixed by the provided path */
@@ -144,6 +145,8 @@ T Utils::NormalizePath(T path, bool trailing_slash) {
 		}
 		it++;
 	}
+        if (path.front() == slash)
+        	normalpath += slash;
 	for(auto it = paths.begin(); it != (paths.end() - 1); it++) {
 		normalpath += *it + slash;
 	}
diff --git a/premake5.lua b/premake5.lua
index d52d9299..b1e784c0 100644
--- a/premake5.lua
+++ b/premake5.lua
@@ -46,6 +46,10 @@ newoption {
 	value = "url",
 	description = "API endpoint to check for updates from"
 }
+newoption {
+	trigger = "environment-paths",
+	description = "Read databases, scripts and images from YGOPRO_*_PATH"
+}
 workspace "ygo"
 	location "build"
 	language "C++"
--
2.26.2
