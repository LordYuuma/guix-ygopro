From 2704d1966043561ffe0cbc8899d181203e99f6ff Mon Sep 17 00:00:00 2001
From: LordYuuma <lordyuuma@gmail.com>
Date: Thu, 22 Oct 2020 02:34:10 +0200
Subject: [PATCH] edopro: Respect YGOPRO environment paths.

* premake5.lua (environment-paths): New option.
* gframe/game.cpp (PopulateResourcesDirectories)[YGOPRO_ENVIRONMENT_PATHS]:
Load scripts from YGOPRO_SCRIPT_PATH.
Load pics from YGOPRO_IMAGE_PATH.  Fall back to local downloader.
* gframe/data_handler.cpp (LoadDatabases)[YGOPRO_ENVIRONMENT_PATHS]:
Load databases and LFLists from YGOPRO_DATA_PATH.
* gframe/deck_manager.cpp (LoadLFList)[YGOPRO_ENVIRONMENT_PATHS]:
Don't load local LFLists -- use those loaded by the DataHandler instead.
* gframe/premake5.lua (ygopro-config)[environment-paths]:
Define YGOPRO_ENVIRONMENT_PATHS.
* gframe/utils.h (NormalizePath): Allow absolute paths.
(PathForeach): New function.
* gframe/utils.cpp (PathForeach): Implement it.
* gframe/text_types.h (operator/): Override for path_string.
---
 gframe/data_handler.cpp | 15 +++++++++++++++
 gframe/deck_manager.cpp |  2 ++
 gframe/game.cpp         | 26 ++++++++++++++++++++++++++
 gframe/premake5.lua     |  4 ++++
 gframe/text_types.h     | 15 ++++++++++++++-
 gframe/utils.cpp        | 11 ++++++++++-
 gframe/utils.h          |  5 ++++-
 premake5.lua            |  4 ++++
 8 files changed, 79 insertions(+), 3 deletions(-)

diff --git a/gframe/data_handler.cpp b/gframe/data_handler.cpp
index e909167f..b7440395 100644
--- a/gframe/data_handler.cpp
+++ b/gframe/data_handler.cpp
@@ -13,15 +13,30 @@
 #include "IrrlichtCommonIncludes1.9/CFileSystem.h"
 #include "Android/porting_android.h"
 #endif
+#include "deck_manager.h"

 namespace ygo {

 void DataHandler::LoadDatabases() {
+#ifdef YGOPRO_ENVIRONMENT_PATHS
+	const char* data_path_env = getenv("YGOPRO_DATA_PATH");
+	if(!data_path_env) return;
+	epro::path_string data_path_s = Utils::ToPathString(data_path_env);
+	ygo::Utils::PathForeach(
+		data_path_s,
+		[&](const epro::path_string& prefix) {
+			for (auto& file : Utils::FindFiles(prefix, { EPRO_TEXT("cdb") }))
+				dataManager->LoadDB(prefix / file);
+			deckManager->LoadLFListSingle(prefix / EPRO_TEXT("lflist.conf"));
+			dataManager->LoadStrings(prefix / EPRO_TEXT("strings.conf"));
+		});
+#else
 	if(std::ifstream("cards.cdb").good())
 		dataManager->LoadDB(EPRO_TEXT("cards.cdb"));
 	for(auto& file : Utils::FindFiles(EPRO_TEXT("./expansions/"), { EPRO_TEXT("cdb") }, 2))
 		dataManager->LoadDB(EPRO_TEXT("./expansions/") + file);
 	LoadArchivesDB();
+#endif
 }
 void DataHandler::LoadArchivesDB() {
 	std::vector<char> buffer;
diff --git a/gframe/deck_manager.cpp b/gframe/deck_manager.cpp
index f84cedea..e41996ca 100644
--- a/gframe/deck_manager.cpp
+++ b/gframe/deck_manager.cpp
@@ -98,9 +98,11 @@ bool DeckManager::LoadLFListFolder(epro::path_string path) {
 	return loaded;
 }
 void DeckManager::LoadLFList() {
+#ifndef YGOPRO_ENVIRONMENT_PATHS
 	LoadLFListSingle(EPRO_TEXT("./expansions/lflist.conf"));
 	LoadLFListSingle(EPRO_TEXT("./lflist.conf"));
 	LoadLFListFolder(EPRO_TEXT("./lflists/"));
+#endif
 	LFList nolimit;
 	nolimit.listName = L"N/A"; // N/A
 	nolimit.hash = 0;
diff --git a/gframe/game.cpp b/gframe/game.cpp
index 1a3cd3bc..0630719e 100644
--- a/gframe/game.cpp
+++ b/gframe/game.cpp
@@ -3350,6 +3350,31 @@ void Game::UpdateUnzipBar(unzip_payload* payload) {
 	game->updateProgressBottom->setProgress(payload->percentage);
 }
 void Game::PopulateResourcesDirectories() {
+#ifdef YGOPRO_ENVIRONMENT_PATHS
+	const char* script_path_env = getenv("YGOPRO_SCRIPT_PATH");
+	if (script_path_env)
+		Utils::PathForeach(
+			Utils::ToPathString(script_path_env),
+			[this](const epro::path_string& prefix) {
+				epro::path_string script_dir = Utils::NormalizePath(prefix);
+				script_dirs.push_back(script_dir);
+				auto script_subdirs = Utils::FindSubfolders(script_dir);
+				script_dirs.insert(script_dirs.end(), script_subdirs.begin(), script_subdirs.end());
+			});
+	const char* image_path_env = getenv("YGOPRO_IMAGE_PATH");
+	if(image_path_env)
+		Utils::PathForeach(
+			Utils::ToPathString(image_path_env),
+			[this](const epro::path_string& prefix) {
+				epro::path_string image_dir = Utils::NormalizePath(prefix);
+				pic_dirs.push_back(image_dir);
+				cover_dirs.push_back(image_dir / EPRO_TEXT("cover/"));
+				field_dirs.push_back(image_dir / EPRO_TEXT("field/"));
+			});
+	pic_dirs.push_back(EPRO_TEXT("./pics/"));
+	cover_dirs.push_back(EPRO_TEXT("./pics/cover/"));
+	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
+#else
 	script_dirs.push_back(EPRO_TEXT("./expansions/script/"));
 	auto expansions_subdirs = Utils::FindSubfolders(EPRO_TEXT("./expansions/script/"));
 	script_dirs.insert(script_dirs.end(), std::make_move_iterator(expansions_subdirs.begin()), std::make_move_iterator(expansions_subdirs.end()));
@@ -3366,6 +3391,7 @@ void Game::PopulateResourcesDirectories() {
 	field_dirs.push_back(EPRO_TEXT("./expansions/pics/field/"));
 	field_dirs.push_back(EPRO_TEXT("archives"));
 	field_dirs.push_back(EPRO_TEXT("./pics/field/"));
+#endif
 }

 void Game::PopulateLocales() {
diff --git a/gframe/premake5.lua b/gframe/premake5.lua
index 2ce7cace..bff5ed28 100644
--- a/gframe/premake5.lua
+++ b/gframe/premake5.lua
@@ -27,6 +27,10 @@ local ygopro_config=function(static_core)
 	if _OPTIONS["update-url"] then
 		defines { "UPDATE_URL=" .. _OPTIONS["update-url"] }
 	end
+	if _OPTIONS["environment-paths"] then
+		defines { "YGOPRO_ENVIRONMENT_PATHS" }
+	end
+
 	includedirs "../ocgcore"
 	links { "clzma", "freetype", "Irrlicht" }
 	filter "system:macosx"
diff --git a/gframe/text_types.h b/gframe/text_types.h
index 64f76b5d..dd707db8 100644
--- a/gframe/text_types.h
+++ b/gframe/text_types.h
@@ -32,4 +32,17 @@ using stringview = nonstd::basic_string_view<char>;
 using wstringview = nonstd::basic_string_view<wchar_t>;
 }
 using namespace nonstd::literals;
-#endif /* TEXT_TYPES_H_ */
\ No newline at end of file
+inline epro::path_string operator/(const epro::path_string& base, const epro::path_string subdir) {
+	if (base.empty() || base == EPRO_TEXT(".")) {
+		epro::path_string path(subdir);
+		return path;
+	}
+	else {
+		epro::path_string path(base);
+		if (base.back() != EPRO_TEXT('/'))
+			path += EPRO_TEXT("/");
+		path += subdir;
+		return path;
+	}
+}
+#endif /* TEXT_TYPES_H_ */
diff --git a/gframe/utils.cpp b/gframe/utils.cpp
index 125b7fd5..1fa5cafa 100644
--- a/gframe/utils.cpp
+++ b/gframe/utils.cpp
@@ -325,6 +325,16 @@ namespace ygo {
 		return true;
 	}

+	void Utils::PathForeach(epro::path_stringview path, const std::function<void(epro::path_string)>& cb)
+	{
+		// FIXME: should be ';' in WIN32 and WIN64.
+		static const epro::path_char path_sep = EPRO_TEXT(':');
+		std::basic_istringstream<epro::path_char> dirs(path.data());
+		epro::path_string dir;
+		while (std::getline(dirs, dir, path_sep))
+			cb(dir);
+	}
+
 	epro::path_stringview Utils::GetExePath() {
 		static epro::path_string binarypath = []()->epro::path_string {
 #ifdef _WIN32
@@ -483,4 +493,3 @@ namespace ygo {
 #endif
 	}
 }
-
diff --git a/gframe/utils.h b/gframe/utils.h
index 86a7e553..d4590c7e 100644
--- a/gframe/utils.h
+++ b/gframe/utils.h
@@ -95,6 +95,7 @@ namespace ygo {
 		static void CreateResourceFolders();
 		static void FindFiles(epro::path_stringview path, const std::function<void(epro::path_stringview, bool)>& cb);
 		static std::vector<epro::path_string> FindFiles(epro::path_stringview path, const std::vector<epro::path_stringview>& extensions, int subdirectorylayers = 0);
+		static void PathForeach(epro::path_stringview path, const std::function<void(epro::path_string)>& cb);
 		/** Returned subfolder names are prefixed by the provided path */
 		static std::vector<epro::path_string> FindSubfolders(epro::path_stringview path, int subdirectorylayers = 1, bool addparentpath = true);
 		static std::vector<int> FindFiles(irr::io::IFileArchive* archive, epro::path_stringview path, const std::vector<epro::path_stringview>& extensions, int subdirectorylayers = 0);
@@ -180,6 +181,8 @@ T Utils::NormalizePath(T path, bool trailing_slash) {
 		}
 		it++;
 	}
+	if (path.front() == slash)
+        	normalpath += slash;
 	for(auto it = paths.begin(); it != (paths.end() - 1); it++) {
 		normalpath += *it + slash;
 	}
diff --git a/premake5.lua b/premake5.lua
index 1c32f434..20a97554 100644
--- a/premake5.lua
+++ b/premake5.lua
@@ -59,6 +59,10 @@ newoption {
 	value = "url",
 	description = "API endpoint to check for updates from"
 }
+newoption {
+	trigger = "environment-paths",
+	description = "Read databases, scripts and images from YGOPRO_*_PATH"
+}
 workspace "ygo"
 	location "build"
 	language "C++"
--
2.29.2
